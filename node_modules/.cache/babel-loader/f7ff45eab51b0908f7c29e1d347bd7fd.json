{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar JSONDigger = /*#__PURE__*/function () {\n  function JSONDigger(datasource, idProp, childrenProp) {\n    _classCallCheck(this, JSONDigger);\n\n    this.ds = datasource;\n    this.id = idProp;\n    this.children = childrenProp;\n    this.count = 0;\n  }\n\n  _createClass(JSONDigger, [{\n    key: \"countNodes\",\n    value: function countNodes(obj) {\n      var _this = this;\n\n      this.count++;\n\n      if (!obj || !Object.keys(obj).length) {\n        return false;\n      } else {\n        if (obj[this.children]) {\n          obj[this.children].forEach(function (child) {\n            _this.countNodes(child);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"findNodeById\",\n    value: function findNodeById(id) {\n      var _this2 = this;\n\n      var _this = this;\n\n      this.countNodes(this.ds);\n      return new Promise(function (resolve, reject) {\n        if (!id) {\n          return reject(new Error('Parameter id is invalid.'));\n        }\n\n        function findNodeById(obj, id, callback) {\n          if (!_this.count) {\n            return;\n          }\n\n          if (obj[_this.id] === id) {\n            _this.count = 0;\n            callback(null, obj);\n          } else {\n            if (_this.count === 1) {\n              _this.count = 0;\n              callback('The node doesn\\'t exist.', null);\n            }\n\n            _this.count--;\n\n            if (obj[_this.children]) {\n              obj[_this.children].forEach(function (node) {\n                findNodeById(node, id, callback);\n              });\n            }\n          }\n        }\n\n        findNodeById(_this2.ds, id, function (msg, node) {\n          if (msg) {\n            reject(new Error(msg));\n          } else {\n            resolve(node);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"matchConditions\",\n    value: function matchConditions(obj, conditions) {\n      var flag = true;\n      Object.keys(conditions).some(function (item) {\n        if (typeof conditions[item] === 'string' || typeof conditions[item] === 'number' || typeof conditions[item] === 'boolean') {\n          if (obj[item] !== conditions[item]) {\n            flag = false;\n            return true;\n          }\n        } else if (conditions[item] instanceof RegExp) {\n          if (!conditions[item].test(obj[item])) {\n            flag = false;\n            return true;\n          }\n        } else if (typeof conditions[item] === 'object') {\n          Object.keys(conditions[item]).some(function (subitem) {\n            switch (subitem) {\n              case '>':\n                {\n                  if (!(obj[item] > conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n\n              case '<':\n                {\n                  if (!(obj[item] < conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n\n              case '>=':\n                {\n                  if (!(obj[item] >= conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n\n              case '<=':\n                {\n                  if (!(obj[item] <= conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n\n              case '!==':\n                {\n                  if (!(obj[item] !== conditions[item][subitem])) {\n                    flag = false;\n                    return true;\n                  }\n\n                  break;\n                }\n            }\n          });\n\n          if (!flag) {\n            return false;\n          }\n        }\n      });\n      return flag;\n    }\n  }, {\n    key: \"findChildren\",\n    value: function () {\n      var _findChildren = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var _this, parent;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this = this;\n\n                if (id) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('Parameter id is invalid.');\n\n              case 3:\n                _context.prev = 3;\n                _context.next = 6;\n                return this.findParent(id);\n\n              case 6:\n                parent = _context.sent;\n                return _context.abrupt(\"return\", parent[this.children]);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                throw new Error('The child nodes don\\'t exist.');\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 10]]);\n      }));\n\n      function findChildren(_x) {\n        return _findChildren.apply(this, arguments);\n      }\n\n      return findChildren;\n    }()\n  }, {\n    key: \"findNodes\",\n    value: function findNodes(conditions) {\n      var _this3 = this;\n\n      var _this = this;\n\n      this.countNodes(this.ds);\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var nodes, findNodes;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  findNodes = function _findNodes(obj, conditions, callback) {\n                    if (!_this.count) {\n                      return;\n                    }\n\n                    if (_this.matchConditions(obj, conditions)) {\n                      nodes.push(obj);\n\n                      if (_this.count === 1) {\n                        _this.count = 0;\n                        callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n                      }\n                    } else {\n                      if (_this.count === 1) {\n                        _this.count = 0;\n                        callback(!nodes.length ? 'The nodes don\\'t exist.' : null, nodes.slice(0));\n                      }\n                    }\n\n                    _this.count--;\n\n                    if (obj[_this.children]) {\n                      obj[_this.children].forEach(function (child) {\n                        findNodes(child, conditions, callback);\n                      });\n                    }\n                  };\n\n                  if (!(!conditions || !Object.keys(conditions).length)) {\n                    _context2.next = 3;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\", reject(new Error('Parameter conditions are invalid.')));\n\n                case 3:\n                  nodes = [];\n                  findNodes(_this3.ds, conditions, function (msg, nodes) {\n                    if (msg) {\n                      reject(new Error(msg));\n                    } else {\n                      resolve(nodes);\n                    }\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2, _x3) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"findParent\",\n    value: function findParent(id) {\n      var _this4 = this;\n\n      var _this = this;\n\n      this.countNodes(this.ds);\n      return new Promise(function (resolve, reject) {\n        if (!id) {\n          return reject(new Error('Parameter id is invalid.'));\n        }\n\n        function findParent(obj, id, callback) {\n          if (_this.count === 1) {\n            _this.count = 0;\n            callback('The parent node doesn\\'t exist.', null);\n          } else {\n            _this.count--;\n\n            if (typeof obj[_this.children] !== 'undefined') {\n              obj[_this.children].forEach(function (child) {\n                if (child[_this.id] === id) {\n                  _this.count = 0;\n                  callback(null, obj);\n                }\n              });\n\n              obj[_this.children].forEach(function (child) {\n                findParent(child, id, callback);\n              });\n            }\n          }\n        }\n\n        findParent(_this4.ds, id, function (msg, parent) {\n          if (msg) {\n            reject(new Error(msg));\n          } else {\n            resolve(parent);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"findSiblings\",\n    value: function () {\n      var _findSiblings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        var _this, parent;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this = this;\n\n                if (id) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new Error('Parameter id is invalid.');\n\n              case 3:\n                _context3.prev = 3;\n                _context3.next = 6;\n                return this.findParent(id);\n\n              case 6:\n                parent = _context3.sent;\n                return _context3.abrupt(\"return\", parent[this.children].filter(function (child) {\n                  return child[_this.id] !== id;\n                }));\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](3);\n                throw new Error('The sibling nodes don\\'t exist.');\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3, 10]]);\n      }));\n\n      function findSiblings(_x4) {\n        return _findSiblings.apply(this, arguments);\n      }\n\n      return findSiblings;\n    }()\n  }, {\n    key: \"findAncestors\",\n    value: function findAncestors(id) {\n      var _this = this;\n\n      return new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(resolve, reject) {\n          var nodes, findAncestors, _findAncestors, ancestors;\n\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _findAncestors = function _findAncestors3() {\n                    _findAncestors = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n                      var parent;\n                      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _context4.prev = 0;\n\n                              if (!(id === _this.ds[_this.id])) {\n                                _context4.next = 7;\n                                break;\n                              }\n\n                              if (nodes.length) {\n                                _context4.next = 4;\n                                break;\n                              }\n\n                              throw new Error('The ancestor nodes don\\'t exist.');\n\n                            case 4:\n                              return _context4.abrupt(\"return\", nodes.slice(0));\n\n                            case 7:\n                              _context4.next = 9;\n                              return _this.findParent(id);\n\n                            case 9:\n                              parent = _context4.sent;\n                              nodes.push(parent);\n                              return _context4.abrupt(\"return\", findAncestors(parent[_this.id]));\n\n                            case 12:\n                              _context4.next = 17;\n                              break;\n\n                            case 14:\n                              _context4.prev = 14;\n                              _context4.t0 = _context4[\"catch\"](0);\n                              throw new Error('The ancestor nodes don\\'t exist.');\n\n                            case 17:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee4, null, [[0, 14]]);\n                    }));\n                    return _findAncestors.apply(this, arguments);\n                  };\n\n                  findAncestors = function _findAncestors2(_x7) {\n                    return _findAncestors.apply(this, arguments);\n                  };\n\n                  if (id) {\n                    _context5.next = 4;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", reject(new Error('Parameter id is invalid.')));\n\n                case 4:\n                  nodes = [];\n                  _context5.prev = 5;\n                  _context5.next = 8;\n                  return findAncestors(id);\n\n                case 8:\n                  ancestors = _context5.sent;\n                  resolve(ancestors);\n                  _context5.next = 15;\n                  break;\n\n                case 12:\n                  _context5.prev = 12;\n                  _context5.t0 = _context5[\"catch\"](5);\n                  reject(_context5.t0);\n\n                case 15:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, null, [[5, 12]]);\n        }));\n\n        return function (_x5, _x6) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    } // validate the input parameters id and data(could be oject or array)\n\n  }, {\n    key: \"validateParams\",\n    value: function validateParams(id, data) {\n      if (!id) {\n        throw new Error('Parameter id is invalid.');\n      }\n\n      if (!data || data.constructor !== Object && data.constructor !== Array || data.constructor === Object && !Object.keys(data).length || data.constructor === Array && !data.length || data.constructor === Array && data.length && !data.every(function (item) {\n        return item && item.constructor === Object && Object.keys(item).length;\n      })) {\n        throw new Error('Parameter data is invalid.');\n      }\n    }\n  }, {\n    key: \"addChildren\",\n    value: function () {\n      var _addChildren = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id, data) {\n        var parent, _parent$this$children;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.validateParams(id, data);\n                _context6.prev = 1;\n                _context6.next = 4;\n                return this.findNodeById(id);\n\n              case 4:\n                parent = _context6.sent;\n\n                if (data.constructor === Object) {\n                  if (parent[this.children]) {\n                    parent[this.children].push(data);\n                  } else {\n                    parent[this.children] = [data];\n                  }\n                } else {\n                  if (parent[this.children]) {\n                    (_parent$this$children = parent[this.children]).push.apply(_parent$this$children, _toConsumableArray(data));\n                  } else {\n                    parent[this.children] = data;\n                  }\n                }\n\n                _context6.next = 11;\n                break;\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](1);\n                throw new Error('Failed to add child nodes.');\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[1, 8]]);\n      }));\n\n      function addChildren(_x8, _x9) {\n        return _addChildren.apply(this, arguments);\n      }\n\n      return addChildren;\n    }()\n  }, {\n    key: \"addSiblings\",\n    value: function () {\n      var _addSiblings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id, data) {\n        var parent, _parent$this$children2;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.validateParams(id, data);\n                _context7.prev = 1;\n                _context7.next = 4;\n                return this.findParent(id);\n\n              case 4:\n                parent = _context7.sent;\n\n                if (data.constructor === Object) {\n                  parent[this.children].push(data);\n                } else {\n                  (_parent$this$children2 = parent[this.children]).push.apply(_parent$this$children2, _toConsumableArray(data));\n                }\n\n                _context7.next = 11;\n                break;\n\n              case 8:\n                _context7.prev = 8;\n                _context7.t0 = _context7[\"catch\"](1);\n                throw new Error('Failed to add sibling nodes.');\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[1, 8]]);\n      }));\n\n      function addSiblings(_x10, _x11) {\n        return _addSiblings.apply(this, arguments);\n      }\n\n      return addSiblings;\n    }()\n  }, {\n    key: \"addRoot\",\n    value: function addRoot(data) {\n      var _this5 = this;\n\n      var _this = this;\n\n      if (!data || data.constructor !== Object || data.constructor === Object && !Object.keys(data).length) {\n        throw new Error('Parameter data is invalid.');\n      }\n\n      try {\n        this.ds[this.children] = [Object.assign({}, this.ds)];\n        delete data[this.children];\n        Object.keys(this.ds).filter(function (prop) {\n          return prop !== _this5.children;\n        }).forEach(function (prop) {\n          if (!data[prop]) {\n            delete _this5.ds[prop];\n          }\n        });\n        Object.assign(this.ds, data);\n      } catch (err) {\n        throw new Error('Failed to add root node.');\n      }\n    }\n  }, {\n    key: \"updateNode\",\n    value: function () {\n      var _updateNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(data) {\n        var node;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(!data || data.constructor !== Object || data.constructor === Object && !Object.keys(data).length || data.constructor === Object && Object.keys(data).length && !data[this.id])) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                throw new Error('Parameter data is invalid.');\n\n              case 2:\n                _context8.prev = 2;\n                _context8.next = 5;\n                return this.findNodeById(data[this.id]);\n\n              case 5:\n                node = _context8.sent;\n                Object.assign(node, data);\n                _context8.next = 12;\n                break;\n\n              case 9:\n                _context8.prev = 9;\n                _context8.t0 = _context8[\"catch\"](2);\n                throw new Error('Failed to update node.');\n\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[2, 9]]);\n      }));\n\n      function updateNode(_x12) {\n        return _updateNode.apply(this, arguments);\n      }\n\n      return updateNode;\n    }()\n  }, {\n    key: \"updateNodes\",\n    value: function () {\n      var _updateNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(ids, data) {\n        var _this, _iterator, _step, id;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _this = this;\n\n                if (!(!ids || ids.constructor === Array && !ids.length || !data)) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                throw new Error('Input parameter is invalid.');\n\n              case 3:\n                _context9.prev = 3;\n                _iterator = _createForOfIteratorHelper(ids);\n                _context9.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                id = _step.value;\n                data[_this.id] = id;\n                _context9.next = 12;\n                return this.updateNode(data);\n\n              case 12:\n                _context9.next = 7;\n                break;\n\n              case 14:\n                _context9.next = 19;\n                break;\n\n              case 16:\n                _context9.prev = 16;\n                _context9.t0 = _context9[\"catch\"](5);\n\n                _iterator.e(_context9.t0);\n\n              case 19:\n                _context9.prev = 19;\n\n                _iterator.f();\n\n                return _context9.finish(19);\n\n              case 22:\n                _context9.next = 27;\n                break;\n\n              case 24:\n                _context9.prev = 24;\n                _context9.t1 = _context9[\"catch\"](3);\n                throw _context9.t1;\n\n              case 27:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[3, 24], [5, 16, 19, 22]]);\n      }));\n\n      function updateNodes(_x13, _x14) {\n        return _updateNodes.apply(this, arguments);\n      }\n\n      return updateNodes;\n    }() // remove single node based on id\n\n  }, {\n    key: \"removeNode\",\n    value: function () {\n      var _removeNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(id) {\n        var _this, parent, index;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _this = this;\n\n                if (!(id === this.ds[this.id])) {\n                  _context10.next = 3;\n                  break;\n                }\n\n                throw new Error('Input parameter is invalid.');\n\n              case 3:\n                _context10.next = 5;\n                return this.findParent(id);\n\n              case 5:\n                parent = _context10.sent;\n                index = parent[this.children].map(function (node) {\n                  return node[_this.id];\n                }).indexOf(id);\n                parent[this.children].splice(index, 1);\n                this.count = 0;\n\n              case 9:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function removeNode(_x15) {\n        return _removeNode.apply(this, arguments);\n      }\n\n      return removeNode;\n    }() // param could be single id, id array or conditions object\n\n  }, {\n    key: \"removeNodes\",\n    value: function () {\n      var _removeNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(param) {\n        var _this, _iterator2, _step2, p, _nodes, ids, _iterator3, _step3, _p;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _this = this;\n\n                if (!(!param || param.constructor === Array && !param.length || param.constructor === Object && !Object.keys(param).length)) {\n                  _context11.next = 3;\n                  break;\n                }\n\n                throw new Error('Input parameter is invalid.');\n\n              case 3:\n                _context11.prev = 3;\n\n                if (!(param.constructor === String || param.constructor === Number)) {\n                  _context11.next = 9;\n                  break;\n                }\n\n                _context11.next = 7;\n                return this.removeNode(param);\n\n              case 7:\n                _context11.next = 50;\n                break;\n\n              case 9:\n                if (!(param.constructor === Array)) {\n                  _context11.next = 29;\n                  break;\n                }\n\n                // if passing in id array\n                _iterator2 = _createForOfIteratorHelper(param);\n                _context11.prev = 11;\n\n                _iterator2.s();\n\n              case 13:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context11.next = 19;\n                  break;\n                }\n\n                p = _step2.value;\n                _context11.next = 17;\n                return this.removeNode(p);\n\n              case 17:\n                _context11.next = 13;\n                break;\n\n              case 19:\n                _context11.next = 24;\n                break;\n\n              case 21:\n                _context11.prev = 21;\n                _context11.t0 = _context11[\"catch\"](11);\n\n                _iterator2.e(_context11.t0);\n\n              case 24:\n                _context11.prev = 24;\n\n                _iterator2.f();\n\n                return _context11.finish(24);\n\n              case 27:\n                _context11.next = 50;\n                break;\n\n              case 29:\n                _context11.next = 31;\n                return this.findNodes(param);\n\n              case 31:\n                _nodes = _context11.sent;\n                ids = _nodes.map(function (node) {\n                  return node[_this.id];\n                });\n                _iterator3 = _createForOfIteratorHelper(ids);\n                _context11.prev = 34;\n\n                _iterator3.s();\n\n              case 36:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context11.next = 42;\n                  break;\n                }\n\n                _p = _step3.value;\n                _context11.next = 40;\n                return this.removeNode(_p);\n\n              case 40:\n                _context11.next = 36;\n                break;\n\n              case 42:\n                _context11.next = 47;\n                break;\n\n              case 44:\n                _context11.prev = 44;\n                _context11.t1 = _context11[\"catch\"](34);\n\n                _iterator3.e(_context11.t1);\n\n              case 47:\n                _context11.prev = 47;\n\n                _iterator3.f();\n\n                return _context11.finish(47);\n\n              case 50:\n                _context11.next = 55;\n                break;\n\n              case 52:\n                _context11.prev = 52;\n                _context11.t2 = _context11[\"catch\"](3);\n                throw new Error('Failed to remove nodes.');\n\n              case 55:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[3, 52], [11, 21, 24, 27], [34, 44, 47, 50]]);\n      }));\n\n      function removeNodes(_x16) {\n        return _removeNodes.apply(this, arguments);\n      }\n\n      return removeNodes;\n    }()\n  }]);\n\n  return JSONDigger;\n}();\n\nexports.default = JSONDigger;\n;","map":null,"metadata":{},"sourceType":"script"}