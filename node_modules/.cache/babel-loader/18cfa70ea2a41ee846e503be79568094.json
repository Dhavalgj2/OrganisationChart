{"ast":null,"code":"import _slicedToArray from \"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/src/edit-node/edit-node.js\";\n\nimport React, { useState } from \"react\";\nimport OrganizationChart from \"@dabeng/react-orgchart\";\nimport JSONDigger from \"json-digger\";\nimport { Box, Paper, makeStyles } from \"@material-ui/core\";\nimport \"./edit-node.css\";\nvar useStyles = makeStyles({\n  conainer: {\n    border: \"unset\"\n  },\n  chart: {\n    backgroundImage: \"unset\"\n  }\n});\nvar company = {\n  id: \"a1\",\n  name: \"ZMVP\"\n};\nvar teams = [\"Team 1\", \"Team 2\", \"Team 3\", \"Team 4\"];\n\nvar formatData = function formatData(company, teams) {\n  var data = {\n    id: company.id,\n    name: company.name,\n    children: []\n  };\n  teams.forEach(function (team) {\n    data.children.push({\n      id: team.replace(/\\s+/gi, \"\"),\n      name: team,\n      parentId: company.id,\n      companyId: company.id\n    });\n  });\n  return data;\n};\n\nvar EditNode = function EditNode() {\n  var classes = useStyles();\n  var datasource = formatData(company, teams);\n\n  var _useState = useState(datasource),\n      _useState2 = _slicedToArray(_useState, 2),\n      ds = _useState2[0],\n      setDS = _useState2[1];\n\n  var readSelectedNode = function readSelectedNode(nodeData) {\n    setSelectedNode(nodeData);\n    setNewNodeName(nodeData.name);\n  };\n\n  var clearSelectedNode = function clearSelectedNode() {\n    setSelectedNode(null);\n  };\n\n  var template = function template(_ref) {\n    var name = _ref.nodeData.name;\n    return /*#__PURE__*/React.createElement(Paper, {\n      elevation: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      p: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, name));\n  };\n\n  var formatJson = function formatJson(node, parentId) {\n    var data = {\n      id: node.id,\n      name: node.name,\n      companyId: node.companyId,\n      parentId: parentId,\n      children: []\n    };\n\n    if (node.children && node.children.length > 0) {\n      node.children.forEach(function (child) {\n        data.children.push(formatJson(child, node.id));\n      });\n    }\n\n    return data;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"edit-chart-wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(OrganizationChart, {\n    containerClass: classes.conainer,\n    chartClass: classes.chart,\n    NodeTemplate: template,\n    draggable: true,\n    datasource: ds,\n    collapsible: false,\n    onClickNode: readSelectedNode,\n    onClickChart: clearSelectedNode,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EditNode;","map":{"version":3,"sources":["/Users/kaustavkarmakar/Downloads/react-orgchart-demo/src/edit-node/edit-node.js"],"names":["React","useState","OrganizationChart","JSONDigger","Box","Paper","makeStyles","useStyles","conainer","border","chart","backgroundImage","company","id","name","teams","formatData","data","children","forEach","team","push","replace","parentId","companyId","EditNode","classes","datasource","ds","setDS","readSelectedNode","nodeData","setSelectedNode","setNewNodeName","clearSelectedNode","template","formatJson","node","length","child"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport OrganizationChart from \"@dabeng/react-orgchart\";\nimport JSONDigger from \"json-digger\";\n\nimport { Box, Paper, makeStyles } from \"@material-ui/core\";\nimport \"./edit-node.css\";\n\nconst useStyles = makeStyles({\n  conainer: {\n    border: \"unset\"\n  },\n  chart: {\n    backgroundImage: \"unset\"\n  }\n});\n\nconst company = {\n  id: \"a1\",\n  name: \"ZMVP\"\n};\n\nconst teams = [\"Team 1\", \"Team 2\", \"Team 3\", \"Team 4\"];\n\nconst formatData = (company, teams) => {\n  const data = {\n    id: company.id,\n    name: company.name,\n    children: []\n  };\n  teams.forEach((team) => {\n    data.children.push({\n      id: team.replace(/\\s+/gi, \"\"),\n      name: team,\n      parentId: company.id,\n      companyId: company.id\n    });\n  });\n  return data;\n};\n\nconst EditNode = () => {\n  const classes = useStyles();\n  const datasource = formatData(company, teams);\n  const [ds, setDS] = useState(datasource);\n\n  const readSelectedNode = (nodeData) => {\n    setSelectedNode(nodeData);\n    setNewNodeName(nodeData.name);\n  };\n\n  const clearSelectedNode = () => {\n    setSelectedNode(null);\n  };\n\n  const template = ({ nodeData: { name } }) => {\n    return (\n      <Paper elevation={2}>\n        <Box p={2}>{name}</Box>\n      </Paper>\n    );\n  };\n\n  const formatJson = (node, parentId) => {\n    const data = {\n      id: node.id,\n      name: node.name,\n      companyId: node.companyId,\n      parentId,\n      children: []\n    };\n    if (node.children && node.children.length > 0) {\n      node.children.forEach((child) => {\n        data.children.push(formatJson(child, node.id));\n      });\n    }\n    return data;\n  };\n\n  return (\n    <div className=\"edit-chart-wrapper\">\n      <OrganizationChart\n        containerClass={classes.conainer}\n        chartClass={classes.chart}\n        NodeTemplate={template}\n        draggable\n        datasource={ds}\n        collapsible={false}\n        onClickNode={readSelectedNode}\n        onClickChart={clearSelectedNode}\n      />\n    </div>\n  );\n};\n\nexport default EditNode;\n"]},"metadata":{},"sourceType":"module"}