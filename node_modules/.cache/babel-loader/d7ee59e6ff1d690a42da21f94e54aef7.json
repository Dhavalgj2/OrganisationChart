{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kaustavkarmakar/Downloads/react-orgchart-demo/src/edit-node/edit-node.js\";\n\nimport React, { useState } from \"react\";\nimport OrganizationChart from \"@dabeng/react-orgchart\";\nimport JSONDigger from \"json-digger\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Box, Button, Input, Paper, makeStyles } from \"@material-ui/core\";\nimport \"./edit-node.css\";\nvar useStyles = makeStyles({\n  conainer: {\n    border: \"unset\"\n  },\n  chart: {\n    backgroundImage: \"unset\"\n  }\n});\nvar company = {\n  id: \"a1\",\n  name: \"ZMVP\"\n};\nvar teams = [\"Team 1\", \"Team 2\", \"Team 3\", \"Team 4\"];\n\nvar formatData = function formatData(company, teams) {\n  var data = {\n    id: company.id,\n    name: company.name,\n    children: []\n  };\n  teams.forEach(function (team) {\n    data.children.push({\n      id: team.replace(/\\s+/gi, \"\"),\n      name: team,\n      parentId: company.id,\n      companyId: company.id\n    });\n  });\n  return data;\n};\n\nvar EditNode = function EditNode() {\n  var classes = useStyles();\n  var datasource = formatData(company, teams);\n\n  var _useState = useState(datasource),\n      _useState2 = _slicedToArray(_useState, 2),\n      ds = _useState2[0],\n      setDS = _useState2[1];\n\n  var dsDigger = new JSONDigger(ds, \"id\", \"children\");\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedNode = _useState4[0],\n      setSelectedNode = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newNodeName = _useState6[0],\n      setNewNodeName = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      newChildNodeName = _useState8[0],\n      setNewChildNodeName = _useState8[1];\n\n  var readSelectedNode = function readSelectedNode(nodeData) {\n    setSelectedNode(nodeData);\n    setNewNodeName(nodeData.name);\n  };\n\n  var clearSelectedNode = function clearSelectedNode() {\n    setSelectedNode(null);\n  };\n\n  var onNameChange = function onNameChange(e) {\n    setNewNodeName(e.target.value);\n  };\n\n  var onChildNameChange = function onChildNameChange(e) {\n    setNewChildNodeName(e.target.value);\n  };\n\n  var addChildNode = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dsDigger.addChildren(_objectSpread({}, selectedNode).id, {\n                name: newChildNodeName,\n                id: newChildNodeName\n              });\n\n            case 2:\n              setDS(_objectSpread({}, dsDigger.ds));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function addChildNode() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var updateNodes = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return dsDigger.updateNodes([selectedNode.id], {\n                id: uuidv4(),\n                name: newNodeName\n              });\n\n            case 2:\n              setNewNodeName(\"\");\n              setDS(_objectSpread({}, dsDigger.ds));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function updateNodes() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var template = function template(_ref3) {\n    var name = _ref3.nodeData.name;\n    return /*#__PURE__*/React.createElement(Paper, {\n      elevation: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      p: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, name));\n  };\n\n  var formatJson = function formatJson(node, parentId) {\n    var data = {\n      id: node.id,\n      name: node.name,\n      companyId: node.companyId,\n      parentId: parentId,\n      children: []\n    };\n\n    if (node.children && node.children.length > 0) {\n      node.children.forEach(function (child) {\n        data.children.push(formatJson(child, node.id));\n      });\n    }\n\n    return data;\n  };\n\n  var exportJson = function exportJson() {\n    console.log(formatJson(dsDigger.ds, dsDigger.ds.id));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"edit-chart-wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    className: \"toolbar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"new-nodes\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    placeholder: \"name\",\n    value: newNodeName,\n    variant: \"contained\",\n    onChange: onNameChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"action-buttons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: !selectedNode,\n    onClick: updateNodes,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"Update Name\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"new-nodes\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    placeholder: \"name\",\n    value: newChildNodeName,\n    variant: \"contained\",\n    onChange: onChildNameChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"action-buttons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    disabled: !selectedNode,\n    onClick: addChildNode,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, \"Add Child\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: exportJson,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"export\"))), /*#__PURE__*/React.createElement(OrganizationChart, {\n    containerClass: classes.conainer,\n    chartClass: classes.chart,\n    NodeTemplate: template,\n    draggable: true,\n    datasource: ds,\n    collapsible: false,\n    onClickNode: readSelectedNode,\n    onClickChart: clearSelectedNode,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EditNode;","map":{"version":3,"sources":["/Users/kaustavkarmakar/Downloads/react-orgchart-demo/src/edit-node/edit-node.js"],"names":["React","useState","OrganizationChart","JSONDigger","v4","uuidv4","Box","Button","Input","Paper","makeStyles","useStyles","conainer","border","chart","backgroundImage","company","id","name","teams","formatData","data","children","forEach","team","push","replace","parentId","companyId","EditNode","classes","datasource","ds","setDS","dsDigger","selectedNode","setSelectedNode","newNodeName","setNewNodeName","newChildNodeName","setNewChildNodeName","readSelectedNode","nodeData","clearSelectedNode","onNameChange","e","target","value","onChildNameChange","addChildNode","addChildren","updateNodes","template","formatJson","node","length","child","exportJson","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport OrganizationChart from \"@dabeng/react-orgchart\";\nimport JSONDigger from \"json-digger\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Box, Button, Input, Paper, makeStyles } from \"@material-ui/core\";\nimport \"./edit-node.css\";\n\nconst useStyles = makeStyles({\n  conainer: {\n    border: \"unset\"\n  },\n  chart: {\n    backgroundImage: \"unset\"\n  }\n});\n\nconst company = {\n  id: \"a1\",\n  name: \"ZMVP\"\n};\n\nconst teams = [\"Team 1\", \"Team 2\", \"Team 3\", \"Team 4\"];\n\nconst formatData = (company, teams) => {\n  const data = {\n    id: company.id,\n    name: company.name,\n    children: []\n  };\n  teams.forEach((team) => {\n    data.children.push({\n      id: team.replace(/\\s+/gi, \"\"),\n      name: team,\n      parentId: company.id,\n      companyId: company.id\n    });\n  });\n  return data;\n};\n\nconst EditNode = () => {\n  const classes = useStyles();\n  const datasource = formatData(company, teams);\n  const [ds, setDS] = useState(datasource);\n  const dsDigger = new JSONDigger(ds, \"id\", \"children\");\n  const [selectedNode, setSelectedNode] = useState();\n  const [newNodeName, setNewNodeName] = useState(\"\");\n  const [newChildNodeName, setNewChildNodeName] = useState(\"\");\n\n  const readSelectedNode = (nodeData) => {\n    setSelectedNode(nodeData);\n    setNewNodeName(nodeData.name);\n  };\n\n  const clearSelectedNode = () => {\n    setSelectedNode(null);\n  };\n\n  const onNameChange = (e) => {\n    setNewNodeName(e.target.value);\n  };\n\n  const onChildNameChange = (e) => {\n    setNewChildNodeName(e.target.value);\n  };\n\n  const addChildNode = async () => {\n    await dsDigger.addChildren({ ...selectedNode }.id, {\n      name: newChildNodeName,\n      id: newChildNodeName\n    });\n    setDS({ ...dsDigger.ds });\n  };\n\n  const updateNodes = async () => {\n    await dsDigger.updateNodes([selectedNode.id], {\n      id: uuidv4(),\n      name: newNodeName\n    });\n    setNewNodeName(\"\");\n    setDS({ ...dsDigger.ds });\n  };\n\n  const template = ({ nodeData: { name } }) => {\n    return (\n      <Paper elevation={2}>\n        <Box p={2}>{name}</Box>\n      </Paper>\n    );\n  };\n\n  const formatJson = (node, parentId) => {\n    const data = {\n      id: node.id,\n      name: node.name,\n      companyId: node.companyId,\n      parentId,\n      children: []\n    };\n    if (node.children && node.children.length > 0) {\n      node.children.forEach((child) => {\n        data.children.push(formatJson(child, node.id));\n      });\n    }\n    return data;\n  };\n\n  const exportJson = () => {\n    console.log(formatJson(dsDigger.ds, dsDigger.ds.id));\n  };\n\n  return (\n    <div className=\"edit-chart-wrapper\">\n      <section className=\"toolbar\">\n        <div className=\"new-nodes\">\n          <Input\n            type=\"text\"\n            placeholder=\"name\"\n            value={newNodeName}\n            variant=\"contained\"\n            onChange={onNameChange}\n          />\n        </div>\n        <div className=\"action-buttons\">\n          <Button disabled={!selectedNode} onClick={updateNodes}>\n            Update Name\n          </Button>\n        </div>\n        <div className=\"new-nodes\">\n          <Input\n            type=\"text\"\n            placeholder=\"name\"\n            value={newChildNodeName}\n            variant=\"contained\"\n            onChange={onChildNameChange}\n          />\n        </div>\n        <div className=\"action-buttons\">\n          <Button disabled={!selectedNode} onClick={addChildNode}>\n            Add Child\n          </Button>\n          <Button onClick={exportJson}>export</Button>\n        </div>\n      </section>\n      <OrganizationChart\n        containerClass={classes.conainer}\n        chartClass={classes.chart}\n        NodeTemplate={template}\n        draggable\n        datasource={ds}\n        collapsible={false}\n        onClickNode={readSelectedNode}\n        onClickChart={clearSelectedNode}\n      />\n    </div>\n  );\n};\n\nexport default EditNode;\n"]},"metadata":{},"sourceType":"module"}